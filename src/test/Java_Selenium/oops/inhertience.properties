Inheritance = one class acquires the properties (fields) and behaviors (methods) of another class.

Single_Inheritance = One class inherits from another class(Parent class (superclass) & Child class (subclass))

Multilevel_Inheritance =A class inherits from another class, which is itself derived from another class.
---> two super class and two child class like grand father , father ,son).
                       
Hierarchical_Inheritance  = One parent class has multiple child classes

Multiple_Inheritance =  A class can inherit from more than one parent class. 
---> This means the child class gets properties and behaviors from multiple super classes. 
---> Java doesn't support multiple inheritance with classes to prevent ambiguity and complexity issues(diamond problem). 
---> Java allows multiple inheritance using interfaces 
---> Interfaces only contain method declarations (no actual implementation).
---> The child class must implement all methods explicitly, avoiding ambiguity.

Hybrid_Inheritance = combination of two or more types of inheritance, 
---> such as Single, Multilevel, Hierarchical, and Multiple Inheritance.
---> Java does not support hybrid inheritance using classes alone
---> but it can be achieved using interfaces.
                                     
                                    Poly_Morphism
One thing showing multiple behaviour is called as polymorphism
There are two types of Polymorphism in Java

1.Compile-Time Polymorphism (Method Overloading)
2.Runtime Polymorphism (Method Overriding)

CompileTime_Polymorphism= Method Overloading allows a class to have multiple methods with the same name but different parameters.
--> Multiple methods with the same name but different parameters.
     
Runtime_Polymorphism= Method Overriding allows a subclass to provide a specific implementation of a method already defined in the parent class.
--> Child class redefines a method from the parent class.

               

1) can we overload main method ?
-----> yes, Overloading the main method is possible, but JVM only calls main(String[] args) by default method to start execution.
2) can we overload finally method ?
------>  No, we cannot overload the finally block because it is not a method. it is a reserved block of code in Java.
3) can we overload private method ?
------> Yes, we can overload a private method in Java because method overloading is based on 
       method signatures (name + parameters) and happens within the same class.
4) Can we overload non static methods?
------> Yes, we can overload both static and non-static methods in Java.


Armstrong number
1. first 523 is arm strog
2.print 1 to 10000 arm strong  